package luna.templerunish;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import luna.templerunish.display.Display;
import luna.templerunish.gfx.ImageLoader;

public class Game implements Runnable{
	
	private Display display;
	public int width, height;
	public String title;
	
	private boolean running = false;
	private Thread thread;
	
	private BufferStrategy bs;
	private Graphics g;
	
	//private BufferedImage testImage;
	
	public Game(String title, int width, int height) {
		this.width = width;
		this.height = height;	
		this.title = title;
	}
	
	private void initialize() {
		display = new Display(title, width, height);
		//testImage = ImageLoader.loadImage("/textures/test.png");
	}
	
	private void tick() {
		
	}
	
	private void render() {
		bs = display.getCanvas().getBufferStrategy();
		if(bs == null) {
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		g = bs.getDrawGraphics();
		//Clear screen
		g.clearRect(0, 0, width, height);
		
		
		//Draw wall
		/*g.setColor(Color.gray);
		g.fillRect(0, 0, 800, 600);
		
		g.setColor(Color.black);
		g.fillRect(20, 20, 760, 560);
		
		g.setColor(Color.white);
		g.drawLine(75, 150, 400, 150);
		g.drawLine(350, 300, 700, 300);
		g.drawLine(150, 500, 600, 500);*/
		
		//End wall drawing!
		
		
		//Draw Start
		
		g.setColor(Color.white);
		g.fillRect(0, 0, 800, 600);
		g.setColor(Color.cyan);
		g.fillRect(200, 200, 400, 200);
		
		//End Start button
		
		bs.show();
		g.dispose();
	}
	
	public void run() {
		
		initialize();
		
		while(running) {
			tick();
			render();
		}
		
		stop();
		
	}
	
	public synchronized void start() {
		if(running)
			return;
		running = true;
		thread = new Thread(this);
		thread.start();
	}
	
	public synchronized void stop() {
		if(!running)
			return;
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}
